<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>影视资源网站收藏</title>
    <url>/2022/07/11/test-2/</url>
    <content><![CDATA[<p><span class="github-emoji"><span>🎥</span><img data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在线看 </p>
<blockquote>
<p>茶杯狐 <a href="https://cupfox.app/">https://cupfox.app/</a>  </p>
</blockquote>
<blockquote>
<p>哔滴影视 <a href="https://www.btbdys.com/">https://www.btbdys.com/</a></p>
</blockquote>
<blockquote>
<p>LIBVIO <a href="https://www.libvio.me/">https://www.libvio.me/</a></p>
</blockquote>
<blockquote>
<p>555电影 <a href="https://www.o8tv.com/">https://www.o8tv.com/</a></p>
</blockquote>
<blockquote>
<p>在线之家 <a href="https://www.zxzjtv.com/">https://www.zxzjtv.com/</a></p>
</blockquote>
<blockquote>
<p>NO视频  <a href="https://www.novipnoad.com/">https://www.novipnoad.com/</a></p>
</blockquote>
<blockquote>
<p>COKEMV <a href="https://cokemv.me/">https://cokemv.me/</a></p>
</blockquote>
<p><span class="github-emoji"><span>🔍</span><img data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 搜索下载 </p>
<blockquote>
<p>BTNULL <a href="https://www.btnull.org/">https://www.btnull.org/</a></p>
</blockquote>
<blockquote>
<p>6v电影网 <a href="https://www.hao6v.tv/">https://www.hao6v.tv/</a></p>
</blockquote>
<blockquote>
<p>音范丝 <a href="https://www.yinfans.me/">https://www.yinfans.me/</a></p>
</blockquote>
<blockquote>
<p>磁力天堂 <a href="https://www.ciligod.com/">https://www.ciligod.com/</a></p>
</blockquote>
<blockquote>
<p>SeedHub <a href="https://seedhub.info/">https://seedhub.info/</a></p>
</blockquote>
<blockquote>
<p>BT之家 <a href="https://btbtt12.com/">https://btbtt12.com/</a></p>
</blockquote>
<p>🎞️ 字幕下载</p>
<blockquote>
<p>SubHD <a href="https://subhd.tv/">https://subhd.tv/</a></p>
</blockquote>
<blockquote>
<p>射手网 <a href="https://assrt.net/">https://assrt.net/</a></p>
</blockquote>
<blockquote>
<p>字幕库 <a href="https://zimuku.org/">https://zimuku.org/</a></p>
</blockquote>
<blockquote>
<p>字幕下载站 <a href="https://www.a4k.net/">https://www.a4k.net/</a></p>
</blockquote>
<blockquote>
<p>中文字幕库 <a href="https://cn.zimuzimu.com/">https://cn.zimuzimu.com/</a></p>
</blockquote>
<blockquote>
<p>人人影视 <a href="https://www.yysub.net/">https://www.yysub.net/</a></p>
</blockquote>
<blockquote>
<p>远鉴字幕组 <a href="https://ifenpaidy.com/">https://ifenpaidy.com/</a></p>
</blockquote>
<p><span class="github-emoji"><span>🍅</span><img data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f345.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在线追番</p>
<blockquote>
<p>Bilibili <a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p>
</blockquote>
<blockquote>
<p>樱花动漫 <a href="http://www.yinghuacd.com/">http://www.yinghuacd.com/</a></p>
</blockquote>
<blockquote>
<p>AGE动漫 <a href="https://www.agemys.cc/">https://www.agemys.cc/</a></p>
</blockquote>
<p><span class="github-emoji"><span>💾</span><img data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 番剧下载</p>
<blockquote>
<p>Nyaa <a href="https://nyaa.si/">https://nyaa.si/</a></p>
</blockquote>
<blockquote>
<p>Tokyo <a href="https://www.tokyotosho.info/">https://www.tokyotosho.info/</a></p>
</blockquote>
<blockquote>
<p>动漫花园 <a href="https://www.dmhy.org/">https://www.dmhy.org/</a></p>
</blockquote>
<blockquote>
<p>蜜柑计划 <a href="https://mikanani.me/">https://mikanani.me/</a></p>
</blockquote>
<blockquote>
<p>漫猫动漫 <a href="http://www.comicat.org/">http://www.comicat.org/</a></p>
</blockquote>
<blockquote>
<p>萌番组 <a href="https://bangumi.moe/">https://bangumi.moe/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
        <category>资源</category>
      </categories>
      <tags>
        <tag>在线观影</tag>
        <tag>BT</tag>
        <tag>番剧</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/07/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>使用hexo+GitHub搭建了自己的个人博客<br>记录生活、收藏资源、积累经验…..<br><span class="github-emoji"><span>🌞</span><img data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌞</span><img data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌞</span><img data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>《Linux命令行与shell脚本编程大全》- 初识Linux shell</title>
    <url>/2022/08/21/%E5%88%9D%E8%AF%86%20linux%20shell/</url>
    <content><![CDATA[<h1 id="初识-linux-shell"><a href="#初识-linux-shell" class="headerlink" title="初识 linux shell"></a>初识 linux shell</h1><h2 id="1-Linux内核"><a href="#1-Linux内核" class="headerlink" title="1.Linux内核"></a>1.Linux内核</h2><p>Linux内核的四种功能</p>
<ul>
<li><p>系统内存管理</p>
</li>
<li><p>软件程序管理</p>
</li>
<li><p>硬件设备管理</p>
</li>
<li><p>文件系统管理</p>
</li>
</ul>
<p>Linux系统将硬件设备视为一种特殊文件，称为<strong>设备文件</strong>。设备文件分为三种</p>
<ul>
<li>字符设备文件</li>
<li>块设备文件</li>
<li>网络设备文件</li>
</ul>
<h2 id="2-GUN实用工具"><a href="#2-GUN实用工具" class="headerlink" title="2.GUN实用工具"></a>2.GUN实用工具</h2><p>供linux系统使用的核心工具被称为coreutils软件包</p>
<ul>
<li>文件实用工具</li>
<li>文本实用工具</li>
<li>进程实用工具</li>
</ul>
<p>GUN/Linux shell 是一种特殊的交互式工具</p>
<ul>
<li>shell包含一组内部命令，完成复制文件、移动文件、重命名文件、显示和终止正在运行的程序这类操作</li>
<li>shell 也允许在命令提示行中输入程序的名字，会将程序名传递给内核以启动程序</li>
<li>将多个shell名令放入文件中作为程序执行——-这些文件称之为<strong>shell脚本</strong></li>
</ul>
<blockquote>
<p>Linux系统中，有很多shell可使用，所有Linux发行版默认的shell都是bash shell</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>《Linux命令行与shell脚本编程大全》- bash shell 基础命令</title>
    <url>/2022/08/22/shell-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="bash-shell基础命令"><a href="#bash-shell基础命令" class="headerlink" title="bash shell基础命令"></a>bash shell基础命令</h1><h2 id="一、启动shell"><a href="#一、启动shell" class="headerlink" title="一、启动shell"></a>一、启动shell</h2><p>GUN bash shell 是一个程序，提供了对Linux系统的交互式访问。</p>
<blockquote>
<p>尽管bash shell会在登陆时自行启动，但是是否会出现shel命令行界面（CLI）取决于所使用的登录方式。</p>
</blockquote>
<ul>
<li>使用虚拟控制台终端登录，那CLI提示符会自动出现，接受shell命令输入</li>
<li>使用图形化桌面环境登录，则需要启动图形化终端仿真器来访问shell CLI提示符</li>
</ul>
<p>无论哪种方法启动之后会看到shell CLI命令提示符，默认的bash shell的提示符是 $ 或者 #（前者是当前是普通用户，后者则是管理员），都表明shell在等待用户输入命令。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root@hanshijun:~# </span><br></pre></td></tr></tbody></table></figure>

<p>提示符中表明了当前的用户名 <strong>root</strong> 及主机名 <strong>hanshijun</strong></p>
<h2 id="二、bash-手册"><a href="#二、bash-手册" class="headerlink" title="二、bash 手册"></a>二、bash 手册</h2><p>手册页将与命令相关的信息分成了多段，每一段的惯用命名标准如下表：</p>
<table>
<thead>
<tr>
<th>段</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Name</td>
<td>命令名及简短描述</td>
</tr>
<tr>
<td>Synopsis</td>
<td>命令语法</td>
</tr>
<tr>
<td>Configuration</td>
<td>命令配置信息</td>
</tr>
<tr>
<td>Description</td>
<td>命令的一般性描述</td>
</tr>
<tr>
<td>Options</td>
<td>命令选项描述</td>
</tr>
<tr>
<td>Exit Status</td>
<td>命令的退出状态</td>
</tr>
<tr>
<td>Return Value</td>
<td>命令的返回值</td>
</tr>
<tr>
<td>Errors</td>
<td>命令的错误消息</td>
</tr>
<tr>
<td>Environment</td>
<td>命令使用的环境变量</td>
</tr>
<tr>
<td>Files</td>
<td>命令用到的文件</td>
</tr>
<tr>
<td>Versions</td>
<td>命令的版本信息</td>
</tr>
<tr>
<td>Conforming To</td>
<td>遵循的命名规则</td>
</tr>
<tr>
<td>Notes</td>
<td>其他有帮助的材料</td>
</tr>
<tr>
<td>Bugs</td>
<td>提交bug的途径</td>
</tr>
<tr>
<td>Example</td>
<td>命令用法示例</td>
</tr>
<tr>
<td>Authors</td>
<td>命令开发人员信息</td>
</tr>
<tr>
<td>Copyright</td>
<td>命令源代码的版权情况</td>
</tr>
<tr>
<td>See Also</td>
<td>与该命令类似的其他命令</td>
</tr>
</tbody></table>
<p> 手册页中有不同的节，每一节分配一个数字（1-9）</p>
<table>
<thead>
<tr>
<th align="center">节 号</th>
<th align="center">所涵盖内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">可执行程序或shell命令</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">系统调用</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">库调用</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">特殊文件</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">文件格式与约定</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">游戏</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">概览、约定及杂项</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">超级用户和系统管理员命令</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">内核例程（routine）</td>
</tr>
</tbody></table>
<h2 id="三、linux文件系统"><a href="#三、linux文件系统" class="headerlink" title="三、linux文件系统"></a>三、linux文件系统</h2><h3 id="1-遍历目录"><a href="#1-遍历目录" class="headerlink" title="1. 遍历目录"></a>1. 遍历目录</h3><p>显示当前目录：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>目录切换：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> destination</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>cd 可以接受单个参数 destination ，来指定想要切换到的目录名</li>
<li>如果没有指定目标参数，即 cd 直接回车运行，则会切换到用户主目录</li>
</ul>
<p>destination 参数的两种表示方式：</p>
<ul>
<li>绝对路径：定义了在虚拟目录结构中，该目录从根目录开始的确切位置，相当于目录的全名，总是以 / 正斜线作为起始</li>
<li>相对路径：允许指定一个基于当前位置的目标路径，相对路径以目录名开始</li>
</ul>
<p>可以在任何包含子目录的目录中使用带有相对路径的 cd 命令，也可以使用特殊字符来表示相对目录位置</p>
<p>有两个特殊字符可用于相对路径中：</p>
<ul>
<li>单点号（ . ），表示当前目录</li>
<li>双点号（ .. ），表示当前目录的父目录</li>
</ul>
<h3 id="2-列出文件和目录"><a href="#2-列出文件和目录" class="headerlink" title="2. 列出文件和目录"></a>2. 列出文件和目录</h3><h4 id="显示基本列表"><a href="#显示基本列表" class="headerlink" title="显示基本列表"></a>显示基本列表</h4><p>ls 最基本的形式是显示当前目录下的文件和目录</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">bin   dev  home  lib32  libx32      media  opt   root  sbin  srv  tmp  var</span><br><span class="line">boot  etc  lib   lib64  lost+found  mnt    proc  run   snap  sys  usr</span><br></pre></td></tr></tbody></table></figure>

<p>ls 命令使用不同的颜色来区分不同类型的文件，也可以使用 -F 选项</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -F</span></span><br><span class="line">bin@   etc/   lib32@   lost+found/  opt/   run/   srv/  usr/</span><br><span class="line">boot/  home/  lib64@   media/       proc/  sbin@  sys/  var/</span><br><span class="line">dev/   lib@   libx32@  mnt/         root/  snap/  tmp/</span><br></pre></td></tr></tbody></table></figure>

<p>-F 选项会在目录名之后添加正斜线（ / ），类似的还有其他的标识</p>
<p>Linux 经常使用隐藏文件来保存配置信息。linux中，隐藏文件通常是文件名以点号（ . ）开始的文件，显示隐藏的文件，要使用 -a 选项</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -a</span></span><br><span class="line">.  ..  .bash_logout  .bashrc  .cache  .profile  .Xauthority</span><br></pre></td></tr></tbody></table></figure>

<p>-R 称作递归选项，可以列出当前目录所包含的子目录中的文件</p>
<blockquote>
<p>选项并不是非得分开输入：ls -F -R  也可以将其合并： ls -FR </p>
</blockquote>
<h4 id="显示长列表"><a href="#显示长列表" class="headerlink" title="显示长列表"></a>显示长列表</h4><p>要想显示更多的文件信息，常用的选项是 -l </p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line">total 64</span><br><span class="line">lrwxrwxrwx   1 root root     7 Apr 21 08:57 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   4 root root  4096 Jun 28 16:13 boot</span><br><span class="line">drwxr-xr-x  19 root root  3960 Aug 21 15:54 dev</span><br><span class="line">drwxr-xr-x 111 root root  4096 Aug 21 15:05 etc</span><br><span class="line">drwxr-xr-x   4 root root  4096 Aug 21 15:04 home</span><br></pre></td></tr></tbody></table></figure>

<p>如果想查看单个文件的长列表，只需在 ls -l 后面跟上该文件名即可</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l 111.txt</span></span><br><span class="line">-rw-r--r-- 1 nobody nogroup 16 Aug 15 07:59 111.txt</span><br></pre></td></tr></tbody></table></figure>

<p>如果想查看目录的相关信息，而非目录所包含的内容，则除了 -l 选项之外还要添加 -d 选项</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -ld home/</span></span><br><span class="line">drwxr-xr-x 4 root root 4096 Aug 21 15:04 home/</span><br></pre></td></tr></tbody></table></figure>

<h4 id="过滤输出列表"><a href="#过滤输出列表" class="headerlink" title="过滤输出列表"></a>过滤输出列表</h4><p>ls 命令支持在命令行中定义过滤器，从而来决定应该在输出中显示哪些文件或目录</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l 文件名</span></span><br></pre></td></tr></tbody></table></figure>

<p>有时可能不知道那个文件的确切名称，ls 也能识别标准通配符（wildcard）</p>
<ul>
<li>问号（ ? ）代表任意单个字符</li>
<li>星号（ * ）代表零个或多个字符</li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -<span class="built_in">ls</span> te?</span></span><br><span class="line">0 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:15 tec</span><br><span class="line">0 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:15 tem</span><br><span class="line">0 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:15 ter</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l *m</span></span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:15 tem</span><br></pre></td></tr></tbody></table></figure>

<p>还可以使用方括号表示该位置可能出现的两种字符或指定字符范围</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l t[ab]m</span></span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:20 tam</span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:20 tbm</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l t[b-c]m</span></span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:20 tbm</span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:20 tcm</span><br></pre></td></tr></tbody></table></figure>

<p>还可以使用惊叹号（ ! ）将不需要的内容排除</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l t[!b]m</span></span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:20 tam</span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:20 tcm</span><br></pre></td></tr></tbody></table></figure>



<blockquote>
<p>通配符匹配是一个功能强大的特性，它也可用于 ls 以外的其他的 shell 命令</p>
</blockquote>
<h3 id="3-处理文件"><a href="#3-处理文件" class="headerlink" title="3. 处理文件"></a>3. 处理文件</h3><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><p>使用 touch 创建一个空文件</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">test</span><br></pre></td></tr></tbody></table></figure>

<h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>cp 命令最基本的用法需要两个参数，即 <strong>源对象</strong> 和 <strong>目标对象</strong></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> /home/work/test/111.txt .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">111.txt</span><br></pre></td></tr></tbody></table></figure>

<p>单点号（ . ）很适合用于 cp 命令，将一个文件复制到当前工作目录中，使用单点号很快捷</p>
<p>cp 命令的 -R 选项用于递归地复制整个目录的内容</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l dir1/</span></span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:44 test_1</span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:45 test_2</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> -R dir1/ dir2/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l dir2/</span></span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:53 test_1</span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:53 test_2</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>注意：要在目标目录名尾部加上正斜线，表明其是一个目录而非文件</p>
</blockquote>
<h4 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h4><p>链接是目录中指向文件真实位置的占位符</p>
<p>Linux系统中有两种类型的文件链接</p>
<ul>
<li>符号链接</li>
<li>硬链接</li>
</ul>
<p><strong>符号链接</strong>（也称为软连接）是一个实实在在的文件，该文件指向存放在虚拟目录结构中某个地方的另一个文件，这两个以符号方式链接在一起的文件彼此的内容并不相同</p>
<p>使用 ln 命令及 -s 选项来创建符号链接</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l test_1</span> </span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:44 test_1</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -s test_1 link_test_1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 hanshijun hanshijun 6 Aug 21 17:59 link_test_1 -&gt; test_1</span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:44 test_1</span><br></pre></td></tr></tbody></table></figure>

<p>在使用时注意链接文件名写在第二个参数的位置</p>
<p>注意链接文件和其指向的数据文件的大小，链接文件只是指向了数据文件，它们的内容不同，是两个完全不同的文件，或者我们也可以通过查看文件的inode编号，文件或目录的inode号是内核分配给文件系统中的每一个对象的唯一标识</p>
<p>查看文件或目录的 inode 号，使用 ls 命令的 -i 选项：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -i test_1 link_test_1</span> </span><br><span class="line">929578 link_test_1  929577 test_1</span><br></pre></td></tr></tbody></table></figure>

<p>**硬链接 **创建的是一个独立的虚拟文件，其中包括了原始文件的信息及位置。两者本质来说就是同一个文件</p>
<p>直接使用 ln 命令进行创建</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ls -l test_1 </span><br><span class="line">-rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 16:44 test_1</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> test_1 link_test_1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r-- 2 hanshijun hanshijun 0 Aug 21 16:44 link_test_1</span><br><span class="line">-rw-rw-r-- 2 hanshijun hanshijun 0 Aug 21 16:44 test_1</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -i</span> </span><br><span class="line">929577 link_test_1  929577 test_1</span><br></pre></td></tr></tbody></table></figure>

<p>创建好的硬链接文件和源文件大小相同，inode相同（共享同一个inode编号），因为两者其实就是同一个文件</p>
<blockquote>
<p>注意：只能对处于同一存储设备的文件创建硬链接。想要在位于不同存储设备的文件之间创建链接，只能使用符号链接。即硬链接不能跨文件系统，而符号链接可以</p>
</blockquote>
<h4 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h4><p>在Linux中，重命名文件称之为 <strong>移动</strong> 。mv 命令可以将文件和目录移动到另一个位置或者是重新命名</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -li</span> </span><br><span class="line">total 0</span><br><span class="line">929577 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:23 test_1</span><br><span class="line">929578 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:23 test_2</span><br><span class="line">929603 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:23 test_3</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> test_1 test_4</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -li</span></span><br><span class="line">total 0</span><br><span class="line">929578 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:23 test_2</span><br><span class="line">929603 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:23 test_3</span><br><span class="line">929577 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:23 test_4</span><br></pre></td></tr></tbody></table></figure>

<p>注意 mv 命令只是将文件名从 test_1 更改为 test_4 ，相应的 <u>inode号</u> 和 <u>时间戳</u> 都没有发生变化，说明 mv 只影响文件名</p>
<p>也可以使用 mv 来移动文件的位置：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -li dir1/test_1</span></span><br><span class="line">929577 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:23 dir1/test_1</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> dir1/test_1 dir2/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -li dir2/test_1</span> </span><br><span class="line">929577 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:23 dir2/test_1</span><br></pre></td></tr></tbody></table></figure>

<p>mv 将 test_1 从 dir1移动到了 dir2，同样 mv 命令没有改变文件的 <u>inode号</u> 和 <u>时间戳</u> ，只是改变了文件的位置</p>
<p>可以使用 mv 命令在移动文件的同时进行重命名：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -li dir1/test_1</span></span><br><span class="line">929576 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:41 dir1/test_1</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> dir1/test_1 dir2/test_4</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -li dir2/test_4</span> </span><br><span class="line">929576 -rw-rw-r-- 1 hanshijun hanshijun 0 Aug 21 18:41 dir2/test_4</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -li dir1/test_1</span></span><br><span class="line">ls: cannot access 'dir1/test_1': No such file or directory</span><br></pre></td></tr></tbody></table></figure>

<p>也可以使用 mv 命令移动整个目录及其内容：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> dir1</span></span><br><span class="line">test_1  test_2  test_3</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> dir1 dir4</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> dir4</span></span><br><span class="line">test_1  test_2  test_3</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> dir1</span></span><br><span class="line">ls: cannot access 'dir1': No such file or directory</span><br></pre></td></tr></tbody></table></figure>

<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>用于删除文件的命令是 rm ，加上 -i 选项会询问是否真的要删除文件</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -i test_1</span></span><br><span class="line">rm: remove regular empty file 'test_1'? y</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> test_1</span></span><br><span class="line">ls: cannot access 'test_1': No such file or directory</span><br></pre></td></tr></tbody></table></figure>

<p>也可以使用通配符来删除一组文件</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -i test_?</span></span><br><span class="line">rm: remove regular empty file 'test_1'? y</span><br><span class="line">rm: remove regular empty file 'test_2'? y</span><br><span class="line">rm: remove regular empty file 'test_3'? y</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> test_?</span></span><br><span class="line">ls: cannot access 'test_?': No such file or directory</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-管理目录"><a href="#4-管理目录" class="headerlink" title="4. 管理目录"></a>4. 管理目录</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><p>使用 mkdir 命令创建目录：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> newdir</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -ld newdir/</span></span><br><span class="line">drwxrwxr-x 2 hanshijun hanshijun 4096 Aug 21 23:10 newdir/</span><br></pre></td></tr></tbody></table></figure>

<p>也可以同时创建目录和子目录</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> -p  dir1/newdir/newnewdir</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -R dir1</span></span><br><span class="line">dir1:</span><br><span class="line">newdir</span><br><span class="line"></span><br><span class="line">dir1/newdir:</span><br><span class="line">newnewdir</span><br><span class="line"></span><br><span class="line">dir1/newdir/newnewdir:</span><br></pre></td></tr></tbody></table></figure>

<h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><p>删除目录的基本命令是 rmdir：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> newdir</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> newdir/newfile</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rmdir</span> newdir</span></span><br><span class="line">rmdir: failed to remove 'newdir': Directory not empty</span><br></pre></td></tr></tbody></table></figure>

<p>默认情况下， rmdir 只能删除<strong>空目录</strong>，因为newdir下有一个newfile的文件，所以删除失败了，需要先把目录中的文件删除，再删除目录</p>
<blockquote>
<p>rmdir 并没有 -i 选项可以询问是否要删除目录</p>
</blockquote>
<p>也可以在整个非空目录下使用 rm 命令，这样通过 -r 选项使得 rm 命令可以向下进入目录，删除目录中的文件，然后再删除目录本身：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> dir1</span></span><br><span class="line">test1  test2</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -ir dir1</span></span><br><span class="line">rm: descend into directory 'dir1'? y</span><br><span class="line">rm: remove regular empty file 'dir1/test2'? y</span><br><span class="line">rm: remove regular empty file 'dir1/test1'? y</span><br><span class="line">rm: remove directory 'dir1'? y</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> dir1</span></span><br><span class="line">ls: cannot access 'dir1': No such file or directory</span><br></pre></td></tr></tbody></table></figure>

<p>如果该目录中有非常多的文件和子目录，想一口气全部删除需要使用 rm -rf 命令，删除指定目录及其所有内容</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -R dir2</span> </span><br><span class="line">dir2:</span><br><span class="line">work</span><br><span class="line"></span><br><span class="line">dir2/work:</span><br><span class="line">11  cs  test</span><br><span class="line"></span><br><span class="line">dir2/work/cs:</span><br><span class="line">client  server</span><br><span class="line"></span><br><span class="line">dir2/work/cs/client:</span><br><span class="line">client  client.c  client.o  Makefile</span><br><span class="line"></span><br><span class="line">dir2/work/cs/server:</span><br><span class="line">Makefile  server  server.c  server.h  server.o</span><br><span class="line"></span><br><span class="line">dir2/work/test:</span><br><span class="line">111.txt  crc.c  makefile  test  test.c  test.o</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -rf dir2</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> dir2</span></span><br><span class="line">ls: cannot access 'dir2': No such file or directory</span><br></pre></td></tr></tbody></table></figure>

<p>世界清净了~</p>
<blockquote>
<p>注意：rm -rf 是一个非常危险的命令，谨慎使用…</p>
</blockquote>
<h3 id="5-查看文件内容"><a href="#5-查看文件内容" class="headerlink" title="5. 查看文件内容"></a>5. 查看文件内容</h3><h4 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h4><p>file 命令是一个方便的小工具，能够探测文件的内部并判断文件类型：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file 111.txt</span> </span><br><span class="line">111.txt: ASCII text, with CRLF line terminators</span><br></pre></td></tr></tbody></table></figure>

<p>file 命令可以作为一种区分目录的方法：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file newdir</span></span><br><span class="line">newdir: directory</span><br></pre></td></tr></tbody></table></figure>

<p>file 命令可以判断一个符号链接文件具体链接到了哪里：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file link_newfile</span> </span><br><span class="line">link_newfile: symbolic link to newfile</span><br></pre></td></tr></tbody></table></figure>

<p>file 命令对于二进制可执行程序，能够确定该程序编译时所面向的平台以及选要何种类型的库， 如果你从未知来源处获得的二进制文件，这会非常的方便：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file server</span></span><br><span class="line">server: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=f348e68d2c7bc91b4adefc546a4c2ffb497a2a1a, for GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></tbody></table></figure>

<h4 id="查看整个文件"><a href="#查看整个文件" class="headerlink" title="查看整个文件"></a>查看整个文件</h4><p>cat 命令可以显示文本文件中所有数据</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> doc</span> </span><br><span class="line">hello world！</span><br><span class="line">hello Linux！</span><br><span class="line"></span><br><span class="line">helle shell!</span><br></pre></td></tr></tbody></table></figure>

<p>-n 选项给所有行加上行号</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> -n doc</span> </span><br><span class="line">     1	hello world！</span><br><span class="line">     2	hello Linux！</span><br><span class="line">     3	</span><br><span class="line">     4	helle shell!</span><br></pre></td></tr></tbody></table></figure>

<p>-b 只给有文本的行加行号</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> -b doc</span> </span><br><span class="line">     1	hello world！</span><br><span class="line">     2	hello Linux！</span><br><span class="line"></span><br><span class="line">     3	helle shell!</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>cat 命令的缺点是运行后无法控制后续操作，为了解决这个问题，more 出现了</p>
<p>more 命令会显示文本文件的内容，但是会在显示每页数据之后暂停下来</p>
<p>more 命令只支持在文本文件中基本的移动，可以使用 more 命令的升级版 less 命令</p>
<h4 id="查看部分文件"><a href="#查看部分文件" class="headerlink" title="查看部分文件"></a>查看部分文件</h4><p>如果要查看的内容在一个大型文本文件的开头或者末尾，只能等待 cat 或者 more 载入整个文件，然后可能还需要翻过成千行才能才能看到，所以Linux提供了相应的命令来解决这种问题</p>
<p>tail 命令会显示文件最后几行的内容（默认情况显示文件末尾10行）</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> doc</span> </span><br><span class="line">line 1</span><br><span class="line">line 2</span><br><span class="line">line 3</span><br><span class="line">line 4</span><br><span class="line">line 5</span><br><span class="line">line 6</span><br><span class="line">line 7</span><br><span class="line">line 8</span><br><span class="line">line 9</span><br><span class="line">line 10</span><br><span class="line">line 11</span><br><span class="line">line 12</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tail</span> doc</span> </span><br><span class="line">line 3</span><br><span class="line">line 4</span><br><span class="line">line 5</span><br><span class="line">line 6</span><br><span class="line">line 7</span><br><span class="line">line 8</span><br><span class="line">line 9</span><br><span class="line">line 10</span><br><span class="line">line 11</span><br><span class="line">line 12</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tail</span> -n 2  doc</span> </span><br><span class="line">line 11</span><br><span class="line">line 12</span><br></pre></td></tr></tbody></table></figure>

<p>可以使用 -n 数字 的方式来修改所显示的行数</p>
<blockquote>
<p>tail 还有一个 -f 选项，该选项允许在其他进程使用此文件时查看文件的内容，tail 命令会保持活动状态并持续的显示添加到文件的内容，这是实时监测系统日志的绝佳方式</p>
</blockquote>
<p>head 命令会显示文件开头的若干行（默认情况显示文件头部10行）</p>
<p>同样也支持 -n 选项，但没用 -f 选项</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>《Linux命令行与shell脚本编程大全》- 更多的bash shell命令</title>
    <url>/2022/08/27/%E6%9B%B4%E5%A4%9A%E7%9A%84bash-shell%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="更多的-bash-shell-命令"><a href="#更多的-bash-shell-命令" class="headerlink" title="更多的 bash shell 命令"></a>更多的 bash shell 命令</h1><h2 id="一、检测程序"><a href="#一、检测程序" class="headerlink" title="一、检测程序"></a>一、检测程序</h2><h3 id="1-探查进程"><a href="#1-探查进程" class="headerlink" title="1. 探查进程"></a>1. 探查进程</h3><p>ps 命令默认显示运行在当前终端中属于当前用户的进程</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps</span></span><br><span class="line">    PID TTY          TIME CMD</span><br><span class="line">  43498 pts/3    00:00:00 bash</span><br><span class="line">  43580 pts/3    00:00:00 ps</span><br></pre></td></tr></tbody></table></figure>

<p>PID：程序的进程 ID</p>
<p>TTY：运行在哪个终端</p>
<p>TIME：占用CPU的时间</p>
<p>查看系统中运行的所有进程，使用 -ef 选项</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -ef</span></span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">root           1       0  0 Aug21 ?        00:00:06 /sbin/init noibrs</span><br><span class="line">root           2       0  0 Aug21 ?        00:00:00 [kthreadd]</span><br><span class="line">root           3       2  0 Aug21 ?        00:00:00 [rcu_gp]</span><br><span class="line">root           4       2  0 Aug21 ?        00:00:00 [rcu_par_gp]</span><br><span class="line">root           5       2  0 Aug21 ?        00:00:00 [netns]</span><br><span class="line">root           7       2  0 Aug21 ?        00:00:00 [kworker/0:0H-events_highpri]</span><br><span class="line">root          10       2  0 Aug21 ?        00:00:00 [mm_percpu_wq]</span><br><span class="line">root          11       2  0 Aug21 ?        00:00:00 [rcu_tasks_rude_]</span><br><span class="line">root          12       2  0 Aug21 ?        00:00:00 [rcu_tasks_trace]</span><br><span class="line">root          13       2  0 Aug21 ?        00:00:00 [ksoftirqd/0]</span><br></pre></td></tr></tbody></table></figure>

<p>UID：启动该进程的用户</p>
<p>PID：进程ID</p>
<p>PPID：父进程的PID</p>
<p>C：进程生命周期的CPU利用率</p>
<p>STIME：进程启动时的系统时间</p>
<p>TTY：进程时从哪个终端设备启动的</p>
<p>TIME：运行进程的累计CPU时间</p>
<p>CMD：启动的程序名称</p>
<p>如果还想获得更多的信息，可以使用 -l 选项，产生长格式输出</p>
<p>使用 -l 多出的几列为：</p>
<p>F：内核分配给进程的系统标志</p>
<p>S：进程的状态（O 正在运行、S 休眠、R可运行，正等待运行、Z 僵化，已终止但找不到其父进程、T 停止）</p>
<p>PRI：进程的优先级（数字越大，优先级越低）</p>
<p>NI：谦让度，用于决定优先级</p>
<p>ADDR：进程的内存地址</p>
<p>SZ：进程被换出时所需交换空间的大致大小</p>
<p>WCHAN：进程休眠的内核函数地址</p>
<h3 id="2-实时监测进程"><a href="#2-实时监测进程" class="headerlink" title="2. 实时监测进程"></a>2. 实时监测进程</h3><p>使用 top 指令</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">top - 23:31:40 up 3 days,  7:37,  5 users,  load average: 0.00, 0.01, 0.00</span><br><span class="line">Tasks: 134 total,   1 running, 133 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">Cpu(s):  0.3 us,  0.2 sy,  0.0 ni, 99.5 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">MiB Mem :   3590.5 total,   2029.5 free,    296.7 used,   1264.3 buff/cache</span><br><span class="line">MiB Swap:      0.0 total,      0.0 free,      0.0 used.   3048.1 avail Mem </span><br></pre></td></tr></tbody></table></figure>

<p>第一行：当前时间、系统的运行时长、登录的用户数、系统的平均负载（1分钟5分钟15分钟内的）</p>
<p>第二行：显示进程概况，多少进程处于运行、休眠、停止以及僵化状态</p>
<p>第三行：CPU 概况</p>
<p>第四、五行：系统内存状态，第四行显示的时物理内存状态，后一行显示的是系统交换空间的状态</p>
<p>键入 q 退出 top</p>
<h3 id="3-结束进程"><a href="#3-结束进程" class="headerlink" title="3. 结束进程"></a>3. 结束进程</h3><p><strong>Linux进程信号</strong></p>
<table>
<thead>
<tr>
<th>信号</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>HUP</td>
<td>挂起</td>
</tr>
<tr>
<td>2</td>
<td>INT</td>
<td>中断</td>
</tr>
<tr>
<td>3</td>
<td>QUIT</td>
<td>结束运行</td>
</tr>
<tr>
<td>9</td>
<td>KILL</td>
<td>无条件终止</td>
</tr>
<tr>
<td>11</td>
<td>SEGV</td>
<td>段错误</td>
</tr>
<tr>
<td>15</td>
<td>TERM</td>
<td>尽可能终止</td>
</tr>
<tr>
<td>17</td>
<td>STOP</td>
<td>无条件停止运动，但不终止</td>
</tr>
<tr>
<td>18</td>
<td>TSTP</td>
<td>停止或暂停，但继续在后台运行</td>
</tr>
<tr>
<td>19</td>
<td>CONT</td>
<td>在 STOP 或TSTP 之后恢复执行</td>
</tr>
</tbody></table>
<p>在Linux中有两个命令可以向运行中的进程发出进程信号：<strong>kill 和 pkill</strong></p>
<ul>
<li>kill 命令</li>
</ul>
<p>kill 命令通过PID 向进程发送信号（只能使用进程的PID而不能使用其对应的程序名）</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> 13597</span></span><br><span class="line">-bash: kill: (13597) - Operation not permitted</span><br></pre></td></tr></tbody></table></figure>

<p>默认情况下，kill 命令会向列出的所有 PID 发送 TERM 信号</p>
<blockquote>
<p>要发送进程信号，必须是进程的属主或root用户</p>
</blockquote>
<ul>
<li>pkill 命令</li>
</ul>
<p>pkill 命令可以使用程序名代替PID来终止进程，同时pkill也支持使用通配符</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pkill http*</span></span><br><span class="line"><span class="meta prompt_">#</span></span><br></pre></td></tr></tbody></table></figure>

<p>该命令将“杀死”所有名称以http起始的进程，比如Apahce Web Server 的 httpd 服务</p>
<blockquote>
<p><strong>警告：</strong>以root身份使用 pkill 命令要格外小心。命令中的通配符很容易意外地将系统重要的进程终止，这可能导致文件系统损坏！</p>
</blockquote>
<h3 id="4-检测磁盘空间"><a href="#4-检测磁盘空间" class="headerlink" title="4. 检测磁盘空间"></a>4. 检测磁盘空间</h3><p><strong>挂载存储设备</strong></p>
<blockquote>
<p>Linux 文件系统会将所有的磁盘都并入单个虚拟目录。在使用新的存储设备之前，需要将其放在虚拟目录中，这项工作称为 **挂载(mounting)**。</p>
</blockquote>
<ol>
<li>mount 命令</li>
</ol>
<p>用于挂载存储设备。</p>
<p>mount 命令提供了 4 部分信息</p>
<ul>
<li>设备文件名</li>
<li>设备在虚拟目录中的挂载点</li>
<li>文件系统类型</li>
<li>已挂载设备的访问状态</li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount -t ext4</span></span><br><span class="line">/dev/vda3 on / type ext4 (rw,relatime)</span><br></pre></td></tr></tbody></table></figure>

<p>要手动在虚拟目录中挂载设备，需要以root用户身份登录，或是以root用户身份登录，或是以root用户身份运行sudo命令，手动挂载设备的基本命令：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount -t <span class="built_in">type</span> device directory</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>type ：指定了磁盘格式化所使用的文件系统类型</li>
<li>后两个参数：指定了该存储设备的设备文件位置以及挂载点在虚拟目录中的位置</li>
</ul>
<p>例：手动将U盘 /dev/sdb1 挂载到 /media/disk </p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount -t vfat /dev/sdb1 /media/disk</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>umount 命令</li>
</ol>
<blockquote>
<p>移除可移动设备时，不能直接将其拔下，应该先<strong>卸载</strong></p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">umount [directory | device]</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>df 命令</li>
</ol>
<p>df 命令可以查看所有已挂载磁盘的使用情况</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">df</span></span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">tmpfs             367664    2632    365032   1% /run</span><br><span class="line">/dev/vda3       20261208 3461952  15744692  19% /</span><br><span class="line">tmpfs            1838320       0   1838320   0% /dev/shm</span><br><span class="line">tmpfs               5120       0      5120   0% /run/lock</span><br><span class="line">/dev/vda2         201615    5329    196286   3% /boot/efi</span><br><span class="line">tmpfs              51200       0     51200   0% /usr/local/aegis/cgroup</span><br><span class="line">tmpfs             367664       4    367660   1% /run/user/1000</span><br></pre></td></tr></tbody></table></figure>

<p>命令输出为：</p>
<ul>
<li>设备文件位置</li>
<li>包含多少已1024字节为单位的块</li>
<li>使用了多少以1024字节为单位的块</li>
<li>还有多少以1024字节为单位的块可用</li>
<li>已用空间所占的百分比</li>
<li>设备挂载点</li>
</ul>
<p>df 的常用命令是 -h ，以人类易读的方式显示磁盘空间，M代表兆字节，G代表吉字节</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">df</span> -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs           360M  2.6M  357M   1% /run</span><br><span class="line">/dev/vda3        20G  3.4G   16G  19% /</span><br><span class="line">tmpfs           1.8G     0  1.8G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">/dev/vda2       197M  5.3M  192M   3% /boot/efi</span><br><span class="line">tmpfs            50M     0   50M   0% /usr/local/aegis/cgroup</span><br><span class="line">tmpfs           360M  4.0K  360M   1% /run/user/1000</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>du 命令</li>
</ol>
<p>du 命令可以显示特定目录的磁盘使用情况</p>
<p>选项：</p>
<ul>
<li>-c 显示所有已列出文件的总大小</li>
<li>-h 按人类易读格式输出</li>
<li>-s 输出每个参数的汇总信息</li>
</ul>
<h3 id="5-处理数据文件"><a href="#5-处理数据文件" class="headerlink" title="5.处理数据文件"></a>5.处理数据文件</h3><p><strong>数据排序</strong></p>
<p>sort 用来对数据进行排序的命令</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> doc</span> </span><br><span class="line">abc</span><br><span class="line">bcd</span><br><span class="line">bss</span><br><span class="line">acc</span><br><span class="line">hanshijun@hanshijun:~/newdir$ sort doc </span><br><span class="line">abc</span><br><span class="line">acc</span><br><span class="line">bcd</span><br><span class="line">bss</span><br></pre></td></tr></tbody></table></figure>

<p>按数值排列，加 -n 选项</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> doc</span> </span><br><span class="line">12</span><br><span class="line">48</span><br><span class="line">6</span><br><span class="line">20</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> doc</span> </span><br><span class="line">12</span><br><span class="line">20</span><br><span class="line">48</span><br><span class="line">6</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> -n doc</span> </span><br><span class="line">6</span><br><span class="line">12</span><br><span class="line">20</span><br><span class="line">48</span><br></pre></td></tr></tbody></table></figure>

<p>另一个常用的选项是 -M ，该选项可以将数字按月排序</p>
<p>sort命令选项</p>
<table>
<thead>
<tr>
<th>短选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td>排序时忽略起始的空白字符</td>
</tr>
<tr>
<td>-C</td>
<td>不排序，如果数据无序也不要报告</td>
</tr>
<tr>
<td>-c</td>
<td>不排序，但检查输入数据是否有序，无序就报告</td>
</tr>
<tr>
<td>-d</td>
<td>仅考虑空白字符和字母数字字符，不考虑特殊字符</td>
</tr>
<tr>
<td>-f</td>
<td>大写字母默认先出现，该选项会忽略大小写</td>
</tr>
<tr>
<td>-g</td>
<td>使用一般数值进行排序</td>
</tr>
<tr>
<td>-i</td>
<td>在排序时忽略不可打印字符</td>
</tr>
<tr>
<td>-k</td>
<td>排序键从POS1位置开始，到POS2位置结束</td>
</tr>
<tr>
<td>-M</td>
<td>用三字符的月份名按月份排序</td>
</tr>
<tr>
<td>-m</td>
<td>合并两个已排序数据文件</td>
</tr>
<tr>
<td>-n</td>
<td>将字符串按字符按数值意义排序</td>
</tr>
<tr>
<td>-o</td>
<td>将排序结果写入指定文件</td>
</tr>
<tr>
<td>-R</td>
<td>根据随机哈希排序</td>
</tr>
<tr>
<td>-r</td>
<td>逆序排序（升序变降序）</td>
</tr>
<tr>
<td>-S</td>
<td>指定使用的内存大小</td>
</tr>
<tr>
<td>-s</td>
<td>禁止 last-resort 比较，实现稳定排序</td>
</tr>
<tr>
<td>-T</td>
<td>指定用于保存临时工作文件的目录</td>
</tr>
<tr>
<td>-t</td>
<td>指定字段分隔符</td>
</tr>
<tr>
<td>-u</td>
<td>和 -c 选项合用时，检查严格排序，不和用，则相同行仅输出一次</td>
</tr>
<tr>
<td>-z</td>
<td>在行尾使用NULL字符代替换行符</td>
</tr>
</tbody></table>
<p>-n 选项适合用于排序数值型输出，比如 du 命令的输出，-r 选项对数值按照降序排列，这样可以快速看出目录中哪些文件占用磁盘空间最多</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> -sh * | <span class="built_in">sort</span> -nr</span></span><br><span class="line">132K	work</span><br><span class="line">52K	hanshijun</span><br></pre></td></tr></tbody></table></figure>

<p>对按字段分隔的数据（例如 /etc/passwd 文件）进行排序，可以使用 -k 和 -t 选项</p>
<p>先使用 -t 指定字段分隔符，然后再使用 -k 指定排序字段</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> -t <span class="string">':'</span> -k 3 -n etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br></pre></td></tr></tbody></table></figure>

<p><strong>数据搜索</strong></p>
<p>grep 命令会在输入或指定文件中逐行搜索匹配指定模式的文本</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">grep [options] pattern [file]</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> text</span> </span><br><span class="line">adc</span><br><span class="line">add</span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep one text</span> </span><br><span class="line">one</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep a text</span> </span><br><span class="line">adc</span><br><span class="line">add</span><br></pre></td></tr></tbody></table></figure>

<p>反向搜索（输出不匹配指定模式的行），可以使用 -v 选项</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -v a text</span> </span><br><span class="line">one</span><br><span class="line">two</span><br></pre></td></tr></tbody></table></figure>

<p>显示匹配指定模式的那些行的行号，使用 -n 选项</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -n a text</span> </span><br><span class="line">1:adc</span><br><span class="line">2:add</span><br></pre></td></tr></tbody></table></figure>

<p>只想知道有多少行含有匹配的模式，使用 -c 选项</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -c a text</span> </span><br><span class="line">2</span><br></pre></td></tr></tbody></table></figure>

<p>指定多个匹配模式，可以使用 -e 选项来逐个指定</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -e t  -e c text</span> </span><br><span class="line">adc</span><br><span class="line">two</span><br></pre></td></tr></tbody></table></figure>

<p><strong>数据压缩</strong></p>
<p>Linux文件压缩工具</p>
<table>
<thead>
<tr>
<th>工具</th>
<th>文件拓展名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>bzip2</td>
<td>.bz2</td>
<td>采用Burrows-Wheeler 块排序文本压缩算法和霍夫曼编码</td>
</tr>
<tr>
<td>compress</td>
<td>.Z</td>
<td>最初的Unix文件压缩工具，已经快要无人使用了</td>
</tr>
<tr>
<td>gzip</td>
<td>.gz</td>
<td>GUN压缩工具，用Lempel-Zivwelch 编码</td>
</tr>
<tr>
<td>xz</td>
<td>.xz</td>
<td>日渐流行的通用压缩工具</td>
</tr>
<tr>
<td>zip</td>
<td>.zip</td>
<td>windows中PKZIP工具的Unix实现</td>
</tr>
</tbody></table>
<p>gzip 软件包是GUN项目的产物，旨在编写一个能够替代原先Unix中compress工具的免费版本</p>
<p>软件包包括：</p>
<ul>
<li>gzip：用于压缩文件</li>
<li>gzcat：用于查看压缩过的文本文件的内容</li>
<li>gunzip：用于解压文件</li>
</ul>
<p><strong>数据归档</strong></p>
<p>Linux和Unix中的标准归档工具是 tar 命令</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tar function [options] object1 object2 ...</span><br></pre></td></tr></tbody></table></figure>

<p>其中，function 定义了 tar 命令要执行的操作，如下表</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>长选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-A</td>
<td>–concatenate</td>
<td>将一个tar归档文件追加到另一个tar归档文件末尾</td>
</tr>
<tr>
<td>-c</td>
<td>–create</td>
<td>创建新的 tar 归档文件</td>
</tr>
<tr>
<td>-d</td>
<td>–diff</td>
<td>检查归档文件中删除的文件</td>
</tr>
<tr>
<td></td>
<td>–delete</td>
<td>从 tar 归档文件中删除文件</td>
</tr>
<tr>
<td>-r</td>
<td>–append</td>
<td>将文件追加到 tar 归档文件末尾</td>
</tr>
<tr>
<td>-t</td>
<td>–list</td>
<td>列出 tar 归档文件的内容</td>
</tr>
<tr>
<td>-u</td>
<td>–update</td>
<td>将比 tar 归档文件中已有的同名文件更新的文件追加到该归档文件</td>
</tr>
<tr>
<td>-x</td>
<td>–extract</td>
<td>从 tar 归档文件中提取文件</td>
</tr>
</tbody></table>
<p>每种操作都使用 option （选项）来定义针对 tar 归档文件的具体行为，下表列出常用的选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-C dir</td>
<td>切换到指定目录</td>
</tr>
<tr>
<td>-f file</td>
<td>将结果输出到文件（或设备）</td>
</tr>
<tr>
<td>-j</td>
<td>将输出传给 bzip2 命令进行压缩</td>
</tr>
<tr>
<td>-J</td>
<td>将输出传给 xz 命令进行压缩</td>
</tr>
<tr>
<td>-p</td>
<td>保留文件的所有权限</td>
</tr>
<tr>
<td>-v</td>
<td>在处理文件时显示文件名</td>
</tr>
<tr>
<td>-z</td>
<td>将输出传给 gzip 命令进行压缩</td>
</tr>
<tr>
<td>-Z</td>
<td>将输出传给 compress 命令进行压缩</td>
</tr>
</tbody></table>
<ol>
<li>打包文件</li>
</ol>
<p>将file1，file2，file3 打包成 file.tar</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tar -cvf file.tar file1 file2 file3</span><br></pre></td></tr></tbody></table></figure>

<p>-c：打包模式	</p>
<p>-f：指定将要创建的打包结果存放文件</p>
<ol start="2">
<li>解包文件</li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tar -xvf file.tar</span><br></pre></td></tr></tbody></table></figure>

<p>-x：解包模式</p>
<p>-f：指定 tar 包文件</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
</search>
